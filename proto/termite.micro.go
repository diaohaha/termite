// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: termite.proto

package termite

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Termite service

type TermiteService interface {
	AddWorkFlow(ctx context.Context, in *AddWorkFlowRequest, opts ...client.CallOption) (*AddWorkFlowResponse, error)
	FinishWorkFlow(ctx context.Context, in *FinishWorkFlowRequest, opts ...client.CallOption) (*FinishWorkFlowResponse, error)
	RecoverWorkFlow(ctx context.Context, in *RecoverWorkFlowRequest, opts ...client.CallOption) (*RecoverWorkFlowResponse, error)
	GetWorkFlowContext(ctx context.Context, in *GetWorkFlowContextRequest, opts ...client.CallOption) (*GetWorkFlowContextResponse, error)
	SetWorkFlowContext(ctx context.Context, in *SetWorkFlowContextRequest, opts ...client.CallOption) (*SetWorkFlowContextResponse, error)
	WorkStart(ctx context.Context, in *WorkStartRequest, opts ...client.CallOption) (*WorkStartResponse, error)
	WorkFinish(ctx context.Context, in *WorkFinishRequest, opts ...client.CallOption) (*WorkFinishResponse, error)
	WorkError(ctx context.Context, in *WorkErrorRequest, opts ...client.CallOption) (*WorkErrorResponse, error)
	WorkDelay(ctx context.Context, in *WorkDelayRequest, opts ...client.CallOption) (*WorkDelayResponse, error)
	// query
	QueryWorkFlow(ctx context.Context, in *QueryWorkFlowRequest, opts ...client.CallOption) (*QueryWorkFlowResponse, error)
	QueryWork(ctx context.Context, in *QueryWorkRequest, opts ...client.CallOption) (*QueryWorkResponse, error)
}

type termiteService struct {
	c    client.Client
	name string
}

func NewTermiteService(name string, c client.Client) TermiteService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "termite"
	}
	return &termiteService{
		c:    c,
		name: name,
	}
}

func (c *termiteService) AddWorkFlow(ctx context.Context, in *AddWorkFlowRequest, opts ...client.CallOption) (*AddWorkFlowResponse, error) {
	req := c.c.NewRequest(c.name, "Termite.AddWorkFlow", in)
	out := new(AddWorkFlowResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *termiteService) FinishWorkFlow(ctx context.Context, in *FinishWorkFlowRequest, opts ...client.CallOption) (*FinishWorkFlowResponse, error) {
	req := c.c.NewRequest(c.name, "Termite.FinishWorkFlow", in)
	out := new(FinishWorkFlowResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *termiteService) RecoverWorkFlow(ctx context.Context, in *RecoverWorkFlowRequest, opts ...client.CallOption) (*RecoverWorkFlowResponse, error) {
	req := c.c.NewRequest(c.name, "Termite.RecoverWorkFlow", in)
	out := new(RecoverWorkFlowResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *termiteService) GetWorkFlowContext(ctx context.Context, in *GetWorkFlowContextRequest, opts ...client.CallOption) (*GetWorkFlowContextResponse, error) {
	req := c.c.NewRequest(c.name, "Termite.GetWorkFlowContext", in)
	out := new(GetWorkFlowContextResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *termiteService) SetWorkFlowContext(ctx context.Context, in *SetWorkFlowContextRequest, opts ...client.CallOption) (*SetWorkFlowContextResponse, error) {
	req := c.c.NewRequest(c.name, "Termite.SetWorkFlowContext", in)
	out := new(SetWorkFlowContextResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *termiteService) WorkStart(ctx context.Context, in *WorkStartRequest, opts ...client.CallOption) (*WorkStartResponse, error) {
	req := c.c.NewRequest(c.name, "Termite.WorkStart", in)
	out := new(WorkStartResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *termiteService) WorkFinish(ctx context.Context, in *WorkFinishRequest, opts ...client.CallOption) (*WorkFinishResponse, error) {
	req := c.c.NewRequest(c.name, "Termite.WorkFinish", in)
	out := new(WorkFinishResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *termiteService) WorkError(ctx context.Context, in *WorkErrorRequest, opts ...client.CallOption) (*WorkErrorResponse, error) {
	req := c.c.NewRequest(c.name, "Termite.WorkError", in)
	out := new(WorkErrorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *termiteService) WorkDelay(ctx context.Context, in *WorkDelayRequest, opts ...client.CallOption) (*WorkDelayResponse, error) {
	req := c.c.NewRequest(c.name, "Termite.WorkDelay", in)
	out := new(WorkDelayResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *termiteService) QueryWorkFlow(ctx context.Context, in *QueryWorkFlowRequest, opts ...client.CallOption) (*QueryWorkFlowResponse, error) {
	req := c.c.NewRequest(c.name, "Termite.QueryWorkFlow", in)
	out := new(QueryWorkFlowResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *termiteService) QueryWork(ctx context.Context, in *QueryWorkRequest, opts ...client.CallOption) (*QueryWorkResponse, error) {
	req := c.c.NewRequest(c.name, "Termite.QueryWork", in)
	out := new(QueryWorkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Termite service

type TermiteHandler interface {
	AddWorkFlow(context.Context, *AddWorkFlowRequest, *AddWorkFlowResponse) error
	FinishWorkFlow(context.Context, *FinishWorkFlowRequest, *FinishWorkFlowResponse) error
	RecoverWorkFlow(context.Context, *RecoverWorkFlowRequest, *RecoverWorkFlowResponse) error
	GetWorkFlowContext(context.Context, *GetWorkFlowContextRequest, *GetWorkFlowContextResponse) error
	SetWorkFlowContext(context.Context, *SetWorkFlowContextRequest, *SetWorkFlowContextResponse) error
	WorkStart(context.Context, *WorkStartRequest, *WorkStartResponse) error
	WorkFinish(context.Context, *WorkFinishRequest, *WorkFinishResponse) error
	WorkError(context.Context, *WorkErrorRequest, *WorkErrorResponse) error
	WorkDelay(context.Context, *WorkDelayRequest, *WorkDelayResponse) error
	// query
	QueryWorkFlow(context.Context, *QueryWorkFlowRequest, *QueryWorkFlowResponse) error
	QueryWork(context.Context, *QueryWorkRequest, *QueryWorkResponse) error
}

func RegisterTermiteHandler(s server.Server, hdlr TermiteHandler, opts ...server.HandlerOption) error {
	type termite interface {
		AddWorkFlow(ctx context.Context, in *AddWorkFlowRequest, out *AddWorkFlowResponse) error
		FinishWorkFlow(ctx context.Context, in *FinishWorkFlowRequest, out *FinishWorkFlowResponse) error
		RecoverWorkFlow(ctx context.Context, in *RecoverWorkFlowRequest, out *RecoverWorkFlowResponse) error
		GetWorkFlowContext(ctx context.Context, in *GetWorkFlowContextRequest, out *GetWorkFlowContextResponse) error
		SetWorkFlowContext(ctx context.Context, in *SetWorkFlowContextRequest, out *SetWorkFlowContextResponse) error
		WorkStart(ctx context.Context, in *WorkStartRequest, out *WorkStartResponse) error
		WorkFinish(ctx context.Context, in *WorkFinishRequest, out *WorkFinishResponse) error
		WorkError(ctx context.Context, in *WorkErrorRequest, out *WorkErrorResponse) error
		WorkDelay(ctx context.Context, in *WorkDelayRequest, out *WorkDelayResponse) error
		QueryWorkFlow(ctx context.Context, in *QueryWorkFlowRequest, out *QueryWorkFlowResponse) error
		QueryWork(ctx context.Context, in *QueryWorkRequest, out *QueryWorkResponse) error
	}
	type Termite struct {
		termite
	}
	h := &termiteHandler{hdlr}
	return s.Handle(s.NewHandler(&Termite{h}, opts...))
}

type termiteHandler struct {
	TermiteHandler
}

func (h *termiteHandler) AddWorkFlow(ctx context.Context, in *AddWorkFlowRequest, out *AddWorkFlowResponse) error {
	return h.TermiteHandler.AddWorkFlow(ctx, in, out)
}

func (h *termiteHandler) FinishWorkFlow(ctx context.Context, in *FinishWorkFlowRequest, out *FinishWorkFlowResponse) error {
	return h.TermiteHandler.FinishWorkFlow(ctx, in, out)
}

func (h *termiteHandler) RecoverWorkFlow(ctx context.Context, in *RecoverWorkFlowRequest, out *RecoverWorkFlowResponse) error {
	return h.TermiteHandler.RecoverWorkFlow(ctx, in, out)
}

func (h *termiteHandler) GetWorkFlowContext(ctx context.Context, in *GetWorkFlowContextRequest, out *GetWorkFlowContextResponse) error {
	return h.TermiteHandler.GetWorkFlowContext(ctx, in, out)
}

func (h *termiteHandler) SetWorkFlowContext(ctx context.Context, in *SetWorkFlowContextRequest, out *SetWorkFlowContextResponse) error {
	return h.TermiteHandler.SetWorkFlowContext(ctx, in, out)
}

func (h *termiteHandler) WorkStart(ctx context.Context, in *WorkStartRequest, out *WorkStartResponse) error {
	return h.TermiteHandler.WorkStart(ctx, in, out)
}

func (h *termiteHandler) WorkFinish(ctx context.Context, in *WorkFinishRequest, out *WorkFinishResponse) error {
	return h.TermiteHandler.WorkFinish(ctx, in, out)
}

func (h *termiteHandler) WorkError(ctx context.Context, in *WorkErrorRequest, out *WorkErrorResponse) error {
	return h.TermiteHandler.WorkError(ctx, in, out)
}

func (h *termiteHandler) WorkDelay(ctx context.Context, in *WorkDelayRequest, out *WorkDelayResponse) error {
	return h.TermiteHandler.WorkDelay(ctx, in, out)
}

func (h *termiteHandler) QueryWorkFlow(ctx context.Context, in *QueryWorkFlowRequest, out *QueryWorkFlowResponse) error {
	return h.TermiteHandler.QueryWorkFlow(ctx, in, out)
}

func (h *termiteHandler) QueryWork(ctx context.Context, in *QueryWorkRequest, out *QueryWorkResponse) error {
	return h.TermiteHandler.QueryWork(ctx, in, out)
}
